import React, { useState } from 'react';

// 메인 App 컴포넌트
const App = () => {
    // 사용자 입력 필기
    const [inputText, setInputText] = useState('');
    // 선택된 어투
    const [selectedTone, setSelectedTone] = useState('친근하고 캐주얼한 어투');
    // 선택된 구조
    const [selectedStructure, setSelectedStructure] = useState('서론-본론-결론');
    // 생성된 인스타그램 피드 글
    const [generatedPost, setGeneratedPost] = useState('');
    // 로딩 상태 (API 호출 중인지 여부)
    const [isLoading, setIsLoading] = useState(false);
    // 에러 메시지
    const [error, setError] = useState('');
    // Google API Key 상태 추가
    const [googleApiKey, setGoogleApiKey] = useState('');

    // 어투 옵션 정의
    const toneOptions = [
        '친근하고 캐주얼한 어투',
        '전문적이고 정보 전달 위주',
        '감성적이고 서정적인 어투',
        '재미있고 유머러스한 어투',
        '간결하고 명료한 어투'
    ];

    // 구조 옵션 정의
    const structureOptions = [
        '서론-본론-결론',
        '핵심 요약 후 상세 설명',
        '질문-답변 형식',
        '목록(리스트) 형식',
        '자유 형식'
    ];

    // Gemini API를 호출하여 게시물 생성
    const generatePost = async () => {
        setIsLoading(true); // 로딩 시작
        setError(''); // 에러 메시지 초기화
        setGeneratedPost(''); // 기존 생성물 초기화

        // API 키 유효성 검사
        if (!googleApiKey.trim()) {
            setError("Google API Key를 입력해주세요.");
            setIsLoading(false);
            return;
        }

        // LLM에 전달할 프롬프트 구성
        const prompt = `
당신은 인스타그램 피드 게시물 작성 전문 AI입니다. 다음 내용을 바탕으로 인스타그램 피드 게시물을 작성해주세요.
사용자의 필기:
"${inputText}"

다음 조건에 맞춰 글을 가공해주세요:
- 어투: ${selectedTone}
- 구조: ${selectedStructure}

결과물은 인스타그램 피드에 바로 게시할 수 있도록 자연스럽고 매력적인 한국어 문체로 작성해주세요. 불필요한 서론/결론 문구 없이 인스타그램 본문만 작성해 주세요. (예: "안녕하세요!", "감사합니다!" 등 제외)
`;

        try {
            // API 키를 사용자가 입력한 값으로 설정
            const apiKey = googleApiKey.trim();
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

            const chatHistory = [];
            chatHistory.push({ role: "user", parts: [{ text: prompt }] });

            const payload = { contents: chatHistory };

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            const result = await response.json();

            // 응답 구조 확인 및 텍스트 추출
            if (result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                const text = result.candidates[0].content.parts[0].text;
                setGeneratedPost(text); // 생성된 텍스트 저장
            } else {
                // 예상치 못한 응답 구조 또는 내용 누락 처리
                console.error("Unexpected API response structure:", result);
                setError("게시물 생성에 실패했습니다. API 응답을 확인하거나 API 키를 다시 확인해주세요.");
            }
        } catch (err) {
            console.error("Error generating post:", err);
            setError("API 호출 중 오류가 발생했습니다. 네트워크 연결을 확인하거나 API 키를 다시 확인해주세요.");
        } finally {
            setIsLoading(false); // 로딩 종료
        }
    };

    // 클립보드에 텍스트 복사
    const copyToClipboard = () => {
        if (generatedPost) {
            // document.execCommand('copy')는 iFrame 환경에서 더 안정적일 수 있습니다.
            const textarea = document.createElement('textarea');
            textarea.value = generatedPost;
            document.body.appendChild(textarea);
            textarea.select();
            try {
                document.execCommand('copy');
                alert('클립보드에 복사되었습니다!'); // 사용자에게 알림
            } catch (err) {
                console.error('클립보드 복사 실패:', err);
                alert('클립보드 복사에 실패했습니다. 직접 복사해주세요.');
            }
            document.body.removeChild(textarea);
        }
    };

    return (
        <div className="min-h-screen bg-gray-100 flex flex-col items-center justify-center p-4 sm:p-6 lg:p-8 font-sans">
            <style>
                {`
                @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
                body {
                    font-family: 'Inter', sans-serif;
                }
                `}
            </style>
            <div className="bg-white p-6 sm:p-8 rounded-2xl shadow-xl w-full max-w-4xl border border-gray-200">
                <h1 className="text-3xl sm:text-4xl font-bold text-center text-gray-800 mb-6">
                    ✨ 인스타그램 피드 자동 작성기 ✨
                </h1>

                {/* Google API Key 입력 섹션 추가 */}
                <div className="mb-8">
                    <label htmlFor="google-api-key" className="block text-lg font-medium text-gray-700 mb-2">
                        🔑 Google API Key 입력
                    </label>
                    <input
                        id="google-api-key"
                        type="password" // 보안을 위해 password 타입으로 설정
                        className="w-full p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 ease-in-out text-base"
                        placeholder="여기에 Google Gemini API 키를 입력해주세요."
                        value={googleApiKey}
                        onChange={(e) => setGoogleApiKey(e.target.value)}
                    />
                     <p className="text-sm text-gray-500 mt-2">
                        API 키는 민감한 정보이므로 주의하여 관리해주세요.
                    </p>
                </div>

                {/* 입력 섹션 */}
                <div className="mb-8">
                    <label htmlFor="input-text" className="block text-lg font-medium text-gray-700 mb-2">
                        ✍️ 필기 입력 (대충 적어도 괜찮아요!)
                    </label>
                    <textarea
                        id="input-text"
                        className="w-full p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 ease-in-out resize-y min-h-[150px] text-base"
                        placeholder="여기에 인스타그램 게시물로 만들고 싶은 내용을 자유롭게 작성해주세요. (예: 오늘 강아지랑 산책했는데 너무 귀여웠고 날씨도 좋았어! 힐링 그 자체)"
                        value={inputText}
                        onChange={(e) => setInputText(e.target.value)}
                    ></textarea>
                </div>

                {/* 옵션 선택 섹션 */}
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-6 mb-8">
                    <div>
                        <label htmlFor="tone-select" className="block text-lg font-medium text-gray-700 mb-2">
                            🗣️ 어투 선택
                        </label>
                        <select
                            id="tone-select"
                            className="w-full p-3 border border-gray-300 rounded-lg bg-white appearance-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 ease-in-out text-base"
                            value={selectedTone}
                            onChange={(e) => setSelectedTone(e.target.value)}
                        >
                            {toneOptions.map((tone) => (
                                <option key={tone} value={tone}>
                                    {tone}
                                </option>
                            ))}
                        </select>
                    </div>

                    <div>
                        <label htmlFor="structure-select" className="block text-lg font-medium text-gray-700 mb-2">
                            📐 구조 선택
                        </label>
                        <select
                            id="structure-select"
                            className="w-full p-3 border border-gray-300 rounded-lg bg-white appearance-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 ease-in-out text-base"
                            value={selectedStructure}
                            onChange={(e) => setSelectedStructure(e.target.value)}
                        >
                            {structureOptions.map((structure) => (
                                <option key={structure} value={structure}>
                                    {structure}
                                </option>
                            ))}
                        </select>
                    </div>
                </div>

                {/* 생성 버튼 */}
                <button
                    onClick={generatePost}
                    // API 키, 입력 텍스트가 비어있거나 로딩 중일 때 버튼 비활성화
                    disabled={isLoading || !inputText.trim() || !googleApiKey.trim()}
                    className={`w-full py-4 px-6 rounded-xl font-semibold text-lg transition-all duration-300 ease-in-out
                        ${isLoading || !inputText.trim() || !googleApiKey.trim()
                            ? 'bg-gradient-to-r from-blue-400 to-blue-300 text-white cursor-not-allowed opacity-70'
                            : 'bg-gradient-to-r from-blue-600 to-blue-500 text-white shadow-lg hover:from-blue-700 hover:to-blue-600 active:scale-98'
                        }
                    `}
                >
                    {isLoading ? (
                        <div className="flex items-center justify-center">
                            <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            생성 중...
                        </div>
                    ) : (
                        '🚀 인스타그램 게시물 생성하기'
                    )}
                </button>

                {/* 에러 메시지 */}
                {error && (
                    <div className="mt-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg text-center font-medium">
                        {error}
                    </div>
                )}

                {/* 생성된 게시물 출력 섹션 */}
                {generatedPost && (
                    <div className="mt-8 pt-8 border-t border-gray-200">
                        <label className="block text-lg font-medium text-gray-700 mb-2">
                            🎉 완성된 인스타그램 피드 글
                        </label>
                        <div className="relative p-5 bg-blue-50 rounded-lg border border-blue-200 text-gray-800 break-words whitespace-pre-wrap min-h-[100px] text-base">
                            {generatedPost}
                        </div>
                        <button
                            onClick={copyToClipboard}
                            className="mt-4 w-full py-3 px-6 rounded-xl font-semibold text-md bg-green-500 text-white shadow-md hover:bg-green-600 transition duration-200 ease-in-out active:scale-98"
                        >
                            📋 클립보드에 복사
                        </button>
                    </div>
                )}
            </div>
        </div>
    );
};

export default App;
